Ddoc

$(SPEC_S Modules,

$(GRAMMAR
$(GNAME Module):
    $(GLINK ModuleDeclaration) $(GLINK DeclDefs)
    $(GLINK DeclDefs)

$(GNAME DeclDefs):
    $(GLINK DeclDef)
    $(GLINK DeclDef) $(I DeclDefs)

$(GNAME DeclDef):
    $(GLINK2 attribute, AttributeSpecifier)
    $(GLINK2 declaration, Declaration)
    $(GLINK2 class, Constructor)
    $(GLINK2 class, Destructor)
    $(GLINK2 struct, Postblit)
    $(GLINK2 class, Allocator)
    $(GLINK2 class, Deallocator)
    $(GLINK2 class, Invariant)
    $(GLINK2 unittest, UnitTest)
    $(GLINK2 class, AliasThis)
    $(GLINK2 class, StaticConstructor)
    $(GLINK2 class, StaticDestructor)
    $(GLINK2 class, SharedStaticConstructor)
    $(GLINK2 class, SharedStaticDestructor)
    $(GLINK2 version, ConditionalDeclaration)
    $(GLINK2 version, DebugSpecification)
    $(GLINK2 version, VersionSpecification)
    $(GLINK2 version, StaticAssert)
    $(GLINK2 template, TemplateDeclaration)
    $(GLINK2 template-mixin, TemplateMixinDeclaration)
    $(GLINK2 template-mixin, TemplateMixin)
    $(GLINK MixinDeclaration)
    $(D ;)
)

$(P Modules have a one-to-one correspondence with source files. The module name
is, by default, the file name with the path and extension stripped off, and can
be set explicitly with the module declaration.)

$(P Modules automatically provide a namespace scope for their contents. Modules
superficially resemble classes, but differ in that:)

$(UL
	$(LI There's only one instance of each module, and it is
	statically allocated.)

	$(LI There is no virtual table.)

	$(LI Modules do not inherit, they have no super modules, etc.)

	$(LI Only one module per file.)

	$(LI Module symbols can be imported.)

	$(LI Modules are always compiled at global scope, and are unaffected
	by surrounding attributes or other modifiers.)
)

$(P Modules can be grouped together in hierarchies called $(I packages).)

$(P Modules offer several guarantees:)

$(UL

	$(LI The order in which modules are imported does not affect the
	semantics.)

	$(LI The semantics of a module are not affected by what imports
	it.)

	$(LI If a module C imports modules A and B, any modifications to B
	will not silently change code in C that is dependent on A.)

)

$(H2 $(LNAME2 module_declaration, Module Declaration))

$(P The $(I ModuleDeclaration) sets the name of the module and what package it
belongs to. If absent, the module name is taken to be the same name (stripped of
path and extension) of the source file name.)

$(GRAMMAR
$(GNAME ModuleDeclaration):
    $(I ModuleAttributes)$(OPT) $(D module) $(I ModuleFullyQualifiedName) $(D ;)

$(GNAME ModuleAttributes):
    $(GLINK ModuleAttribute)
    $(GLINK ModuleAttribute) $(I ModuleAttributes)

$(GNAME ModuleAttribute):
    $(GLINK2 attribute, DeprecatedAttribute)
    $(GLINK2 attribute, UserDefinedAttribute)

$(GNAME ModuleFullyQualifiedName):
    $(I ModuleName)
    $(I Packages) $(D .) $(I ModuleName)

$(GNAME ModuleName):
    $(I Identifier)

$(GNAME Packages):
    $(I PackageName)
    $(I Packages) $(D .) $(I PackageName)

$(GNAME PackageName):
    $(I Identifier)
)

$(P The $(I Identifiers) preceding the rightmost are the $(I Packages) that the
module is in. The packages correspond to directory names in the source file
path. Package names cannot be keywords, hence the corresponding directory names
cannot be keywords, either.)

$(P If present, the $(I ModuleDeclaration) appears syntactically first in the
source file, and there can be only one per source file.)

$(P Example:)

---------
module c.stdio; // module stdio in the c package
---------

$(P By convention, package and module names are all lower case. This is because
those names can have a one-to-one correspondence with the operating system's
directory and file names, and many file systems are not case sensitive. All
lower case package and module names will minimize problems moving projects
between dissimilar file systems.)

$(P If the file name of a module is an invalid module name (e.g.
`foo-bar.d`), you may use a module declaration to set a valid module name:)

---------
module foo_bar;
---------

$(P $(I ModuleDeclaration) can have an optional $(GLINK2 attribute,
DeprecatedAttribute). The compiler will produce a message when the deprecated
module is imported.)

---------
deprecated module foo;
---------

---------
module bar;
import foo;  // Deprecated: module foo is deprecated
---------

$(P $(I DeprecatedAttribute) can have an optional string argument to provide a
more expressive message.)

---------
deprecated("Please use foo2 instead.")
module foo;
---------

---------
module bar;
import foo;  // Deprecated: module foo is deprecated - Please use foo2 instead.
---------

$(H2 $(LEGACY_LNAME2 ImportDeclaration, import-declaration, Import Declaration))

$(P Symbols from one module are made available in another module by using the
$(I ImportDeclaration):)

$(GRAMMAR
$(GNAME ImportDeclaration):
    $(D import) $(I ImportList) $(D ;)
    $(D static import) $(I ImportList) $(D ;)

$(GNAME ImportList):
    $(I Import)
    $(I ImportBindings)
    $(I Import) $(D ,) $(I ImportList)

$(GNAME Import):
    $(I ModuleFullyQualifiedName)
    $(I ModuleAliasIdentifier) $(D =) $(I ModuleFullyQualifiedName)

$(GNAME ImportBindings):
    $(I Import) $(D :) $(I ImportBindList)

$(GNAME ImportBindList):
    $(I ImportBind)
    $(I ImportBind) $(D ,) $(I ImportBindList)

$(GNAME ImportBind):
    $(I Identifier)
    $(I Identifier) = $(I Identifier)

$(GNAME ModuleAliasIdentifier):
    $(I Identifier)
)

$(P There are several forms of the $(I ImportDeclaration), from generalized to
fine-grained importing.)

$(P The order in which $(I ImportDeclaration)s occur has no significance.)

$(P $(I ModuleFullyQualifiedName)s in the $(I ImportDeclaration) must be fully
qualified with whatever packages they are in. They are not considered to be
relative to the module that imports them.)

$(H2 $(LNAME2 name_lookup, Symbol Name Lookup))

$(P The simplest form of importing is to just list the modules being imported:)

$(RUNNABLE_EXAMPLE
---------
module myapp.main;

import std.stdio; // import module stdio from package std

class Foo : BaseClass
{
    import myapp.foo;  // import module myapp.foo in this class' scope
    void bar ()
    {
        import myapp.bar;  // import module myapp.bar in this function' scope
        writeln("hello!");  // calls std.stdio.writeln
    }
}
---------
)

$(P When a symbol name is used unqualified, a two-phase lookup will happen.
First, the module scope will be searched, starting from the innermost scope.
For example, in the previous example, while looking for $(SINGLEQUOTE writeln),
the order will be:)

$(UL
    $(LI Declarations inside $(SINGLEQUOTE bar).)
    $(LI Declarations inside $(SINGLEQUOTE Foo).)
    $(LI Declarations inside $(SINGLEQUOTE BaseClass).)
    $(LI Declarations at module scope.)
)

$(P If the first lookup wasn't successful, a second one is performed on imports.
In the second lookup phase inherited scopes are ignored.  This includes scope of
base classes and interface (in this example, $(SINGLEQUOTE BaseClass)'s imports
would be ignored), as well as imports in mixed-in $(D template).)

$(P Symbol lookup stops as soon as a symbol is found. If two symbols with the
same name are found at the same lookup phase, this ambiguity will result in a
compilation error.)

---
module A;
void foo();
void bar();
---

---
module B;
void foo();
void bar();
---

---
module C;
import A;
void foo();
void test()
{
    foo(); // C.foo() is called, it is found before imports are searched
    bar(); // A.bar() is called, since imports are searched
}
---

---
module D;
import A;
import B;
void test()
{
    foo();   // error, A.foo() or B.foo() ?
    A.foo(); // ok, call A.foo()
    B.foo(); // ok, call B.foo()
}
---

---
module E;
import A;
import B;
alias foo = B.foo;
void test()
{
    foo();   // call B.foo()
    A.foo(); // call A.foo()
    B.foo(); // call B.foo()
}
---

$(H2 $(LNAME2 public_imports, Public Imports))

$(P By default, imports are $(I private). This means that if module A imports
module B, and module B imports module C, then names from C are visible only from
B and not from A. This prevents surprising name clashes from modules which
haven't directly been imported.)

$(P An import can be however specifically declared $(I public), which will cause
names from the imported module to be visible to further imports. So in the above
example where module A imports module B, if module B $(I publicly) imports
module C, names from C will be visible in A as well.)

$(P All symbols from a publicly imported module are also aliased in the
importing module. Thus in the above example if C contains the name foo, it will
be accessible in A as $(D foo), $(D B.foo) and $(D C.foo).)

$(P For another example:)

---
module W;
void foo() { }
---

---
module X;
void bar() { }
---

---
module Y;
import W;
public import X;
...
foo();  // calls W.foo()
bar();  // calls X.bar()
---

---
module Z;
import Y;
...
foo();	 // error, foo() is undefined
bar();	 // ok, calls X.bar()
X.bar(); // ditto
Y.bar(); // ok, Y.bar() is an alias to X.bar()
---

$(H2 $(LNAME2 static_imports, Static Imports))

$(P Basic imports work well for programs with relatively few modules and
imports. If there are a lot of imports, name collisions can start occurring
between the names in the various imported modules. One way to stop this is by
using static imports. A static import requires one to use a fully qualified name
to reference the module's names:)

---
static import std.stdio;

void main()
{
    writeln("hello!");           // error, writeln is undefined
    std.stdio.writeln("hello!"); // ok, writeln is fully qualified
}
---

$(H2 $(LNAME2 renamed_imports, Renamed Imports))

$(P A local name for an import can be given, through which all references to the
module's symbols must be qualified with:)

$(RUNNABLE_EXAMPLE
---
import io = std.stdio;

void main()
{
    io.writeln("hello!");        // ok, calls std.stdio.writeln
    std.stdio.writeln("hello!"); // error, std is undefined
    writeln("hello!");           // error, writeln is undefined
}
---
)

$(P Renamed imports are handy when dealing with very long import names.)

$(H2 $(LNAME2 selective_imports, Selective Imports))

$(P Specific symbols can be exclusively imported from a module and bound into
the current namespace:)

$(RUNNABLE_EXAMPLE
---
import std.stdio : writeln, foo = write;

void main()
{
    std.stdio.writeln("hello!"); // error, std is undefined
    writeln("hello!");           // ok, writeln bound into current namespace
    write("world");              // error, write is undefined
    foo("world");                // ok, calls std.stdio.write()
    fwritefln(stdout, "abc");    // error, fwritefln undefined
}
---
)

$(P $(D static) cannot be used with selective imports.)

$(H2 $(LNAME2 renamed_selective_imports, Renamed and Selective Imports))

$(P When renaming and selective importing are combined:)

$(RUNNABLE_EXAMPLE
------------
import io = std.stdio : foo = writeln;

void main()
{
    writeln("bar");           // error, writeln is undefined
    std.stdio.foo("bar");     // error, foo is bound into current namespace
    std.stdio.writeln("bar"); // error, std is undefined
    foo("bar");               // ok, foo is bound into current namespace,
                              // FQN not required
    io.writeln("bar");        // ok, io=std.stdio bound the name io in
                              // the current namespace to refer to the entire
                              //   module
    io.foo("bar");            // error, foo is bound into current namespace,
                              // foo is not a member of io
}
--------------
)

$(H2 $(LNAME2 scoped_imports, Scoped Imports))

$(P Import declarations may be used at any scope. For example:)

$(RUNNABLE_EXAMPLE
--------------
void main()
{
    import std.stdio;
    writeln("bar");
}
--------------
)

$(P The imports are looked up to satisfy any unresolved symbols at that scope.
Imported symbols may hide symbols from outer scopes.)

$(P In function scopes, imported symbols only become visible after the import
declaration lexically appears in the function body. In other words, imported
symbols at function scope cannot be forward referenced.)

$(RUNNABLE_EXAMPLE
--------------
void main()
{
    void writeln(string) {}
    void foo()
    {
        writeln("bar"); // calls main.writeln
        import std.stdio;
        writeln("bar"); // calls std.stdio.writeln
        void writeln(string) {}
        writeln("bar"); // calls main.foo.writeln
    }
    writeln("bar"); // calls main.writeln
    std.stdio.writeln("bar");  // error, std is undefined
}
--------------
)

$(H2 $(LNAME2 module_scope_operators, Module Scope Operator))

$(P Sometimes, it's necessary to override the usual lexical scoping rules to
access a name hidden by a local name. This is done with the global scope
operator, which is a leading $(SINGLEQUOTE .):)

---------
int x;

int foo(int x)
{
    if (y)
        return x;  // returns foo.x, not global x
    else
        return .x; // returns global x
}
---------

$(P The leading $(SINGLEQUOTE .) means look up the name at the module scope
level.)

$(H2 $(LNAME2 staticorder, Static Construction and Destruction))

$(P Static constructors are code that gets executed to initialize a module or a
class before the main() function gets called. Static destructors are code that
gets executed after the main() function returns, and are normally used for
releasing system resources.)

$(P There can be multiple static constructors and static destructors within one
module. The static constructors are run in lexical order, the static destructors
are run in reverse lexical order.)

$(P Static constructors and static destructors run on thread local data, and are
run whenever threads are created or destroyed.)

$(P Shared static constructors and shared static destructors are run on global
shared data, and constructors are run once on program startup and destructors
are run once on program termination.)

$(H2 $(LNAME2 order_of_static_ctor, Order of Static Construction))

$(P Shared static constructors on all modules are run before any static
constructors.)

$(P The order of static initialization is implicitly determined by the $(I
import) declarations in each module. Each module is assumed to depend on any
imported modules being statically constructed first. Other than following that
rule, there is no imposed order on executing the module static constructors.)

$(P Cycles (circular dependencies) in the import declarations are allowed as
long as not both of the modules contain static constructors or static
destructors. Violation of this rule will result in a runtime exception.)

$(H2 $(LNAME2 override_cycle_abort, Overriding Cycle Detection Abort))

$(P You can override the cyclic detection behavior using the D Runtime switch
`--DRT-oncycle=...` The following behaviors are supported:)

$(OL
    $(LI `abort` The default behavior. The normal behavior as described
            in the previous section)
    $(LI `deprecate` This functions just like `abort`, but upon cycle
            detection the runtime will use a flawed pre-2.072 algorithm to
            determine if the cycle was previously detected. If no cycles are
            detected in the old algorithm, execution continues, but a
            deprecation message is printed.)
    $(LI `print` Print all cycles detected, but do not abort execution.
            When cycles are present, order of static construction is
            implementation defined, and not guaranteed to be valid.)
            $(LI `ignore` Do not abort execution or print any cycles. When
            cycles are present, order of static construction is implementation
            defined, and not guaranteed to be valid.)
)

$(H2 $(LNAME2 order_of_static_ctors, Order of Static Construction within a Module))

$(P Within a module, the static construction occurs in the lexical order in
which they appear.)

$(H2 $(LNAME2 order_static_dtor, Order of Static Destruction))

$(P It is defined to be exactly the reverse order that static construction was
performed in. Static destructors for individual modules will only be run if the
corresponding static constructor successfully completed.)

$(P Shared static destructors are executed after static destructors.)

$(H2 $(LNAME2 order_of_unittests, Order of Unit tests))

$(P Unit tests are run in the lexical order in which they appear within a
module.)

$(H2 $(LEGACY_LNAME2 MixinDeclaration, mixin-declaration, Mixin Declaration))

$(GRAMMAR
$(GNAME MixinDeclaration):
    $(D mixin) $(D $(LPAREN)) $(ASSIGNEXPRESSION) $(D $(RPAREN)) $(D ;)
)

$(P The $(ASSIGNEXPRESSION) must evaluate at compile time to a constant string.
The text contents of the string must be compilable as a valid $(GLINK DeclDefs),
and is compiled as such.)

$(H2 $(LEGACY_LNAME2 PackageModule, package-module, Package Module))

$(P A package module can be used to publicly import other modules, while
enabling a simpler import syntax. It enables converting a module into a package
of modules, without breaking existing code which uses that module. Example of a
set of library modules:)

$(B libweb/client.d:)

---------
module libweb.client;

void runClient() { }
---------

$(B libweb/server.d:)

---------
module libweb.server;

void runServer() { }
---------

$(B libweb/package.d:)

---------
module libweb;

public import libweb.client;
public import libweb.server;
---------

$(P The package module must have the file name $(D package.d). The module name
is declared to be the fully qualified name of the package. Package modules can
be imported just like any other modules:)

$(B test.d:)

---------
module test;

// import the package module
import libweb;

void main()
{
    runClient();
    runServer();
}
---------

$(P A package module can be nested inside of a sub-package:)

$(B libweb/utils/package.d:)

---------
// must be declared as the fully qualified name of the package, not just 'utils'
module libweb.utils;

// publicly import modules from within the 'libweb.utils' package.
public import libweb.utils.conv;
public import libweb.utils.text;
---------

$(P The package module can then be imported with the standard module import
declaration:)

$(B test.d:)

---------
module test;

// import the package module
import libweb.utils;

void main() { }
---------

$(SPEC_SUBNAV_PREV_NEXT grammar, Grammar, declaration, Declarations)
)

Macros:
    CHAPTER=4
	TITLE=Modules
	_=
